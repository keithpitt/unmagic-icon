<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Unmagic Icon Gallery</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    
    :root {
      --bg: #fff;
      --fg: #333;
      --border: #e0e0e0;
      --tab-bg: #f5f5f5;
      --tab-hover: #e8e8e8;
      --tab-border: #ddd;
      --active-bg: #333;
      --active-fg: #fff;
      --icon-hover: #f8f8f8;
      --icon-border-hover: #999;
      --input-border: #ccc;
      --input-border-focus: #666;
      --muted: #666;
      --no-results: #999;
    }
    
    [data-theme="dark"] {
      --bg: #1a1a1a;
      --fg: #e0e0e0;
      --border: #333;
      --tab-bg: #2a2a2a;
      --tab-hover: #333;
      --tab-border: #444;
      --active-bg: #e0e0e0;
      --active-fg: #1a1a1a;
      --icon-hover: #2a2a2a;
      --icon-border-hover: #666;
      --input-border: #444;
      --input-border-focus: #888;
      --muted: #999;
      --no-results: #666;
    }
    
    body { 
      font-family: -apple-system, system-ui, sans-serif; 
      background: var(--bg);
      color: var(--fg);
      padding: 20px;
      line-height: 1.5;
    }
    
    .header {
      margin-bottom: 30px;
      padding-bottom: 20px;
      border-bottom: 1px solid var(--border);
      position: relative;
    }
    
    .theme-switcher {
      position: absolute;
      top: 0;
      right: 0;
      padding: 8px 12px;
      background: var(--tab-bg);
      border: 1px solid var(--tab-border);
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    }
    
    .theme-switcher:hover {
      background: var(--tab-hover);
    }
    
    .search-box {
      margin-bottom: 20px;
    }
    
    .search-box input {
      width: 100%;
      max-width: 400px;
      padding: 8px 12px;
      font-size: 14px;
      border: 1px solid var(--input-border);
      border-radius: 4px;
      outline: none;
    }
    
    .search-box input:focus {
      border-color: var(--input-border-focus);
    }
    
    .tabs {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }
    
    .tab {
      padding: 8px 16px;
      background: var(--tab-bg);
      border: 1px solid var(--tab-border);
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      text-decoration: none;
      color: var(--fg);
      display: inline-block;
    }
    
    .tab:hover {
      background: var(--tab-hover);
      text-decoration: none;
    }
    
    .tab.active {
      background: var(--active-bg);
      color: var(--active-fg);
      border-color: var(--active-bg);
    }
    
    .icon-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
      gap: 20px;
      margin-top: 30px;
    }
    
    .icon-item {
      text-align: center;
      padding: 15px;
      border: 1px solid var(--border);
      border-radius: 4px;
      cursor: pointer;
    }
    
    .icon-item:hover {
      background: var(--icon-hover);
      border-color: var(--icon-border-hover);
    }
    
    .icon-item svg {
      width: 48px;
      height: 48px;
      margin-bottom: 8px;
      display: block;
      margin-left: auto;
      margin-right: auto;
    }
    
    .icon-name {
      font-size: 12px;
      color: var(--muted);
      word-break: break-all;
    }
    
    .stats {
      margin-top: 20px;
      font-size: 14px;
      color: var(--muted);
    }
    
    .copy-toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: var(--active-bg);
      color: var(--active-fg);
      padding: 12px 20px;
      border-radius: 4px;
      opacity: 0;
      transform: translateY(20px);
      transition: all 0.3s ease;
      pointer-events: none;
      font-size: 14px;
    }
    
    .copy-toast.show {
      opacity: 1;
      transform: translateY(0);
    }
    
    .no-results {
      text-align: center;
      color: var(--no-results);
      padding: 40px;
      font-size: 14px;
    }
    
    [hidden] {
      display: none !important;
    }
  </style>
</head>
<body>
  <div class="header">
    <button class="theme-switcher" id="themeSwitcher">🌙</button>
    
    <div class="search-box">
      <input 
        type="text" 
        id="searchInput"
        placeholder="Search icons..." 
        value="<%= CGI.escapeHTML(@search_query) %>"
        autocomplete="off"
      >
    </div>
    
    <div class="tabs">
      <% @libraries.each do |library_name, library| %>
        <% 
          query_param = @search_query.empty? ? "" : "?q=#{CGI.escape(@search_query)}"
          is_active = library_name == @selected_library
        %>
        <a href="/<%= library_name %><%= query_param %>" 
           class="tab <%= is_active ? 'active' : '' %>">
          <%= library_name %> (<%= library.icons.length %>)
        </a>
      <% end %>
    </div>
  </div>
  
  <div class="stats" id="stats"></div>
  
  <div class="icon-grid" id="iconGrid"></div>
  
  <div class="copy-toast" id="copyToast">Copied to clipboard!</div>
  
  <script>
    // Icon data for current library only
    const currentLibrary = '<%= @selected_library %>';
    const iconsData = <%= @libraries[@selected_library].icons.to_json %>;
    
    // Pre-rendered SVGs for current library only
    const svgCache = {};
    <% library = @libraries[@selected_library] %>
    <% library.icons.each do |icon_name| %>
      svgCache['<%= icon_name %>'] = `<%= render_icon_svg(@selected_library, icon_name).gsub('`', '\`').gsub('$', '\$') %>`;
    <% end %>
    
    // State
    let searchQuery = '<%= @search_query %>';
    
    // Elements
    const searchInput = document.getElementById('searchInput');
    const iconGrid = document.getElementById('iconGrid');
    const stats = document.getElementById('stats');
    const copyToast = document.getElementById('copyToast');
    const themeSwitcher = document.getElementById('themeSwitcher');
    
    // Functions
    function filterIcons() {
      const query = searchQuery.toLowerCase();
      const filtered = query 
        ? iconsData.filter(icon => icon.toLowerCase().includes(query))
        : iconsData;
      
      renderIcons(filtered);
      updateStats(filtered.length);
    }
    
    function renderIcons(icons) {
      if (icons.length === 0) {
        iconGrid.innerHTML = '<div class="no-results">No icons found</div>';
        return;
      }
      
      iconGrid.innerHTML = icons.map(iconName => {
        if (!svgCache[iconName]) {
          throw new Error(`Icon not found: ${currentLibrary}/${iconName}`);
        }
        
        return `
          <div class="icon-item" data-icon="${iconName}">
            ${svgCache[iconName]}
            <div class="icon-name">${iconName}</div>
          </div>
        `;
      }).join('');
    }
    
    function updateStats(count) {
      stats.textContent = `Showing ${count} icons from ${currentLibrary}`;
    }
    
    function copyIcon(iconName) {
      const text = `${currentLibrary}/${iconName}`;
      navigator.clipboard.writeText(text).then(() => {
        copyToast.textContent = `Copied: ${text}`;
        copyToast.classList.add('show');
        setTimeout(() => copyToast.classList.remove('show'), 2000);
      });
    }
    
    function updateURL() {
      const params = new URLSearchParams();
      if (searchQuery) {
        params.set('q', searchQuery);
      }
      const queryString = params.toString();
      const newURL = window.location.pathname + (queryString ? '?' + queryString : '');
      window.history.replaceState({}, '', newURL);
      
      // Update all tab links with new query
      document.querySelectorAll('.tab').forEach(tab => {
        const href = tab.getAttribute('href').split('?')[0];
        tab.setAttribute('href', href + (queryString ? '?' + queryString : ''));
      });
    }
    
    // Theme management
    function loadTheme() {
      const savedTheme = localStorage.getItem('theme') || 'light';
      document.documentElement.setAttribute('data-theme', savedTheme);
      themeSwitcher.textContent = savedTheme === 'dark' ? '☀️' : '🌙';
    }
    
    function toggleTheme() {
      const currentTheme = document.documentElement.getAttribute('data-theme') || 'light';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      themeSwitcher.textContent = newTheme === 'dark' ? '☀️' : '🌙';
    }
    
    // Event listeners
    searchInput.addEventListener('input', (e) => {
      searchQuery = e.target.value;
      filterIcons();
      updateURL();
    });
    
    iconGrid.addEventListener('click', (e) => {
      const iconItem = e.target.closest('.icon-item');
      if (iconItem) {
        copyIcon(iconItem.dataset.icon);
      }
    });
    
    themeSwitcher.addEventListener('click', toggleTheme);
    
    // Initialize
    loadTheme();
    filterIcons();
  </script>
</body>
</html>